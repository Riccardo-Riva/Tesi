3	Creating the Topologies
	3.1 Topological Objects
		A topology is a set of lines (propagators) connecting a set of points (vertices). We restrict ourselves to connected topologies. 

		A vertex is characterized by two numbers: its adjacency and its counter-term order.
			Vertex[adj][n]
			Vertex[adj, cto][n]

		A propagator connects two vertices, possibly carrying a field.
			Propagator[t][from, to]
			Propagator[t][from, to, field]

		The propagators, then, are collected into topologies.
			Topology[p1 , p2 , ...]
			Topology[s][...]
			TopologyList[t1 , t2 , ...]
			TopologyList[info][...]

		To load FeynArts on the current Marhematica kernel:
			$LoadFeynArts = True;
			<< FeynCalc`

	3.2 CreateTopologies
		The basic function to generate topologies is CreateTopologies. It creates topologies based on how many loops and external legs they have.

			CreateTopologies[l, i -> o]	l loops, i incoming legs, o outgoing legs
			CreateTopologies[l, e]		l loops, e external legs

		Options:	
			Options				default value
			Adjacencies			{3, 4}			allowed adjacencies of the vertices
			CTOrder				0				counter-term order of the topologies
			ExcludeTopologies	{}				list of filters for excluding topologies
			StartingTopologies 	All 			list to starting topologies to use

	3.3 Creating Counter-term Topologies
		We can generate also counter-term diagrams, up to a specified order.
			CreateCTTopologies[l, i -> o]
			CreateCTTopologies[l, e]
		The Options are the same as CreateTopologies

	3.4 Creating Topologies with generic Vertex Functions
		Topologies can also be created with “placeholders” for one-particle-irreducible (1PI)vertex functions. The idea is to reduce the number of diagrams by calculating the vertex functions separately and inserting the final expression into tree diagrams at the proper places.

			CreateVFTopologies[l, i -> o]
			CreateVFTopologies[l, e]

		The creation of "VF" is essentially the same as the creation of counter-term topologies. In fact, the place where the vertex function must later be inserted is given precisely by the location of the cross on the counter-term diagram of the corresponding order.

		CreateFeynAmp translates the vertex-function placeholders into generic objects of the form VertexFunction[o][f1 , f2 ,...]

		???
		Internally, the tricky part is to decide which vertex functions are allowed and which are not. Unlike in the case of ordinary counter-terms, InsertFields cannot simply look up which vertices are present in the model since there are exceptions: for instance in the electroweak Standard Model the γγH vertex has neither a counter-term nor even a tree-level vertex. Nevertheless, loop diagrams for this vertex exist. Therefore, different constraints have to be used: only such vertex functions are generated for which there exists a corresponding generic vertex, and which do not violate conservation of quantum numbers.
		???

	3.5 Excluding Topologies
		The ExcludeTopologies option specifies topology exclusion filters. Some filters are supplied with FeynArts, others can be defined. The pre-defined filters work on topologies of any loop number.
			Loops[patt]
			CTs[patt]
			Tadpoles
			TadpoleCTs
			SelfEnergies
			SelfEnergyCTs
			Triangles
			TriangleCTs
			Boxes
			BoxCTs
			Pentagons
			PentagonCTs
			Hexagons
			HexagonCTs
			AllBoxes
			AllBoxCTs
			WFCorrections
			WFCorrectionCTs
			Reducible
			Irreducible

		Every filter type for Loop Topologies has the corresponding counter-term topology filter

		To extend the filtering capabilities, you may define your own filter functions. Here is
		how the Triangles filter is defined:

		$ExcludeTopologies[ Triangles ] = FreeQ[ToTree[#], Centre[3]]&

		#### Rewatch

	3.6 Selecting Starting Topologies
		Using the option StartingTopologies to select particular starting topologies may significantly speed up CreateTopologies, especially for higher-loop topologies. For example, it is much faster to start without the reducible three-loop starting topologies than to exclude the reducible topologies afterwards. he default setting All evaluates to all starting topologies for the given loop number and counter-term order. It is allowed to use patterns, e.g. StartingTopologies -> Three[_] selects only the irreducible three-loop starting topologies.

		#### REwatch

4 Inserting Fields into Topologies
	4.1 The Three-Level Fields Concept
		There are three different levels of fields, generic fields, classes of fields, and specific particles. Field information becomes more and more specific with these levels.

			Generic, Classes, Particles

		Generic Fields:
			Abstract field types

			F, S, V, U, T 			basic field types: fermion, scalar, vector, ghost,and tensor fields
			Mix[g1 , g2 ]g1 –g2 	mixing field

		Classes Fields:
			Classes fields represent sets of fields with common properties such as behaviour under charge conjugation. A class is a generic field type with a class number, e.g. F[1]. The class specifies which further indices (if any) the class members possess and the range of these indices.

		Particle Fields:
			Particles fields are then class members with definite indices, e.g. F[1, {1, 2}] if the class F[1] has two indices. For classes fields without further indices, classes and particles fields are the same.

		Antiparticles (charge-conjugate fields) are denoted by a minus sign in front of the field, e.g. if F[2, {1}] is the electron, -F[2, {1}] is the positron.

		### Rewatch

		List of field objects

			F 				generic fermion field
			F[n]			fermion class n, e.g. F[2] is the class of leptons in SM.mod
			F[n,{i,...}]	member of fermion class n, e.g. F[2,{1}] is the electron in SM.mod
			-field			charge-conjugate of field
			2 mixingfield	mixingfield with left and right partner reversed

	4.2 InsertFields

		The computer-algebraic generation of Feynman diagrams corresponds to the distribution of fields over topologies in such a way that the resulting diagrams contain only couplings allowed by the model.

			InsertFields[t, {i1 , i2 , ...} -> {o1 , o2 , ...}]
				insert fields into the TopologyList t where the incoming fields are i1 , i2 , . . . and the outgoing fields are o1 , o2 , . . .

